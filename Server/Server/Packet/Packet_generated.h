// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKET_PACKETDEFINE_H_
#define FLATBUFFERS_GENERATED_PACKET_PACKETDEFINE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace PacketDefine {

struct Packet;
struct PacketBuilder;

struct PACKET_LOGIN_REQ;
struct PACKET_LOGIN_REQBuilder;

struct PACKET_LOGIN_RES;
struct PACKET_LOGIN_RESBuilder;

struct PACKET_CREATE_LOBBY_REQ;
struct PACKET_CREATE_LOBBY_REQBuilder;

struct PACKET_CREATE_LOBBY_RES;
struct PACKET_CREATE_LOBBY_RESBuilder;

struct PACKET_ENTER_LOBBY_REQ;
struct PACKET_ENTER_LOBBY_REQBuilder;

struct PACKET_ENTER_LOBBY_RES;
struct PACKET_ENTER_LOBBY_RESBuilder;

struct PACKET_LEAVE_LOBBY_REQ;
struct PACKET_LEAVE_LOBBY_REQBuilder;

struct PACKET_LEAVE_LOBBY_RES;
struct PACKET_LEAVE_LOBBY_RESBuilder;

enum PACKET_ID : uint8_t {
  PACKET_ID_NONE = 0,
  PACKET_ID_PACKET_LOGIN_REQ = 1,
  PACKET_ID_PACKET_LOGIN_RES = 2,
  PACKET_ID_PACKET_CREATE_LOBBY_REQ = 3,
  PACKET_ID_PACKET_CREATE_LOBBY_RES = 4,
  PACKET_ID_PACKET_ENTER_LOBBY_REQ = 5,
  PACKET_ID_PACKET_ENTER_LOBBY_RES = 6,
  PACKET_ID_PACKET_LEAVE_LOBBY_REQ = 7,
  PACKET_ID_PACKET_LEAVE_LOBBY_RES = 8,
  PACKET_ID_MIN = PACKET_ID_NONE,
  PACKET_ID_MAX = PACKET_ID_PACKET_LEAVE_LOBBY_RES
};

inline const PACKET_ID (&EnumValuesPACKET_ID())[9] {
  static const PACKET_ID values[] = {
    PACKET_ID_NONE,
    PACKET_ID_PACKET_LOGIN_REQ,
    PACKET_ID_PACKET_LOGIN_RES,
    PACKET_ID_PACKET_CREATE_LOBBY_REQ,
    PACKET_ID_PACKET_CREATE_LOBBY_RES,
    PACKET_ID_PACKET_ENTER_LOBBY_REQ,
    PACKET_ID_PACKET_ENTER_LOBBY_RES,
    PACKET_ID_PACKET_LEAVE_LOBBY_REQ,
    PACKET_ID_PACKET_LEAVE_LOBBY_RES
  };
  return values;
}

inline const char * const *EnumNamesPACKET_ID() {
  static const char * const names[10] = {
    "NONE",
    "PACKET_LOGIN_REQ",
    "PACKET_LOGIN_RES",
    "PACKET_CREATE_LOBBY_REQ",
    "PACKET_CREATE_LOBBY_RES",
    "PACKET_ENTER_LOBBY_REQ",
    "PACKET_ENTER_LOBBY_RES",
    "PACKET_LEAVE_LOBBY_REQ",
    "PACKET_LEAVE_LOBBY_RES",
    nullptr
  };
  return names;
}

inline const char *EnumNamePACKET_ID(PACKET_ID e) {
  if (::flatbuffers::IsOutRange(e, PACKET_ID_NONE, PACKET_ID_PACKET_LEAVE_LOBBY_RES)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPACKET_ID()[index];
}

template<typename T> struct PACKET_IDTraits {
  static const PACKET_ID enum_value = PACKET_ID_NONE;
};

template<> struct PACKET_IDTraits<PacketDefine::PACKET_LOGIN_REQ> {
  static const PACKET_ID enum_value = PACKET_ID_PACKET_LOGIN_REQ;
};

template<> struct PACKET_IDTraits<PacketDefine::PACKET_LOGIN_RES> {
  static const PACKET_ID enum_value = PACKET_ID_PACKET_LOGIN_RES;
};

template<> struct PACKET_IDTraits<PacketDefine::PACKET_CREATE_LOBBY_REQ> {
  static const PACKET_ID enum_value = PACKET_ID_PACKET_CREATE_LOBBY_REQ;
};

template<> struct PACKET_IDTraits<PacketDefine::PACKET_CREATE_LOBBY_RES> {
  static const PACKET_ID enum_value = PACKET_ID_PACKET_CREATE_LOBBY_RES;
};

template<> struct PACKET_IDTraits<PacketDefine::PACKET_ENTER_LOBBY_REQ> {
  static const PACKET_ID enum_value = PACKET_ID_PACKET_ENTER_LOBBY_REQ;
};

template<> struct PACKET_IDTraits<PacketDefine::PACKET_ENTER_LOBBY_RES> {
  static const PACKET_ID enum_value = PACKET_ID_PACKET_ENTER_LOBBY_RES;
};

template<> struct PACKET_IDTraits<PacketDefine::PACKET_LEAVE_LOBBY_REQ> {
  static const PACKET_ID enum_value = PACKET_ID_PACKET_LEAVE_LOBBY_REQ;
};

template<> struct PACKET_IDTraits<PacketDefine::PACKET_LEAVE_LOBBY_RES> {
  static const PACKET_ID enum_value = PACKET_ID_PACKET_LEAVE_LOBBY_RES;
};

bool VerifyPACKET_ID(::flatbuffers::Verifier &verifier, const void *obj, PACKET_ID type);
bool VerifyPACKET_IDVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum ErrorCode : int16_t {
  ErrorCode_SUCCESS = 0,
  ErrorCode_USER_MGR_INVALID_USER_INDEX = 11,
  ErrorCode_USER_MGR_INVALID_USER_UNIQUEID = 12,
  ErrorCode_LOGIN_USER_AUTHURIZE_FAIL = 1001,
  ErrorCode_LOGIN_USER_ALREADY = 1002,
  ErrorCode_LOGIN_USER_USED_ALL_OBJ = 1003,
  ErrorCode_NEW_ROOM_USED_ALL_OBJ = 2001,
  ErrorCode_NEW_ROOM_FAIL_ENTER = 2002,
  ErrorCode_ENTER_ROOM_NOT_FIND_USER = 2003,
  ErrorCode_ENTER_ROOM_INVALID_USER_STATUS = 2004,
  ErrorCode_ENTER_ROOM_NOT_USED_STATUS = 2005,
  ErrorCode_ENTER_ROOM_FULL_USER = 2006,
  ErrorCode_ROOM_INVALID_INDEX = 2007,
  ErrorCode_ROOM_NOT_USED = 2008,
  ErrorCode_ROOM_TOO_MANY_PACKET = 2009,
  ErrorCode_LEAVE_ROOM_INVALID_ROOM_INDEX = 2010,
  ErrorCode_CHAT_ROOM_INVALID_ROOM_INDEX = 2011,
  ErrorCode_MIN = ErrorCode_SUCCESS,
  ErrorCode_MAX = ErrorCode_CHAT_ROOM_INVALID_ROOM_INDEX
};

inline const ErrorCode (&EnumValuesErrorCode())[17] {
  static const ErrorCode values[] = {
    ErrorCode_SUCCESS,
    ErrorCode_USER_MGR_INVALID_USER_INDEX,
    ErrorCode_USER_MGR_INVALID_USER_UNIQUEID,
    ErrorCode_LOGIN_USER_AUTHURIZE_FAIL,
    ErrorCode_LOGIN_USER_ALREADY,
    ErrorCode_LOGIN_USER_USED_ALL_OBJ,
    ErrorCode_NEW_ROOM_USED_ALL_OBJ,
    ErrorCode_NEW_ROOM_FAIL_ENTER,
    ErrorCode_ENTER_ROOM_NOT_FIND_USER,
    ErrorCode_ENTER_ROOM_INVALID_USER_STATUS,
    ErrorCode_ENTER_ROOM_NOT_USED_STATUS,
    ErrorCode_ENTER_ROOM_FULL_USER,
    ErrorCode_ROOM_INVALID_INDEX,
    ErrorCode_ROOM_NOT_USED,
    ErrorCode_ROOM_TOO_MANY_PACKET,
    ErrorCode_LEAVE_ROOM_INVALID_ROOM_INDEX,
    ErrorCode_CHAT_ROOM_INVALID_ROOM_INDEX
  };
  return values;
}

inline const char *EnumNameErrorCode(ErrorCode e) {
  switch (e) {
    case ErrorCode_SUCCESS: return "SUCCESS";
    case ErrorCode_USER_MGR_INVALID_USER_INDEX: return "USER_MGR_INVALID_USER_INDEX";
    case ErrorCode_USER_MGR_INVALID_USER_UNIQUEID: return "USER_MGR_INVALID_USER_UNIQUEID";
    case ErrorCode_LOGIN_USER_AUTHURIZE_FAIL: return "LOGIN_USER_AUTHURIZE_FAIL";
    case ErrorCode_LOGIN_USER_ALREADY: return "LOGIN_USER_ALREADY";
    case ErrorCode_LOGIN_USER_USED_ALL_OBJ: return "LOGIN_USER_USED_ALL_OBJ";
    case ErrorCode_NEW_ROOM_USED_ALL_OBJ: return "NEW_ROOM_USED_ALL_OBJ";
    case ErrorCode_NEW_ROOM_FAIL_ENTER: return "NEW_ROOM_FAIL_ENTER";
    case ErrorCode_ENTER_ROOM_NOT_FIND_USER: return "ENTER_ROOM_NOT_FIND_USER";
    case ErrorCode_ENTER_ROOM_INVALID_USER_STATUS: return "ENTER_ROOM_INVALID_USER_STATUS";
    case ErrorCode_ENTER_ROOM_NOT_USED_STATUS: return "ENTER_ROOM_NOT_USED_STATUS";
    case ErrorCode_ENTER_ROOM_FULL_USER: return "ENTER_ROOM_FULL_USER";
    case ErrorCode_ROOM_INVALID_INDEX: return "ROOM_INVALID_INDEX";
    case ErrorCode_ROOM_NOT_USED: return "ROOM_NOT_USED";
    case ErrorCode_ROOM_TOO_MANY_PACKET: return "ROOM_TOO_MANY_PACKET";
    case ErrorCode_LEAVE_ROOM_INVALID_ROOM_INDEX: return "LEAVE_ROOM_INVALID_ROOM_INDEX";
    case ErrorCode_CHAT_ROOM_INVALID_ROOM_INDEX: return "CHAT_ROOM_INVALID_ROOM_INDEX";
    default: return "";
  }
}

enum PacketOldID : int16_t {
  PacketOldID_INVALID = 0,
  PacketOldID_SYSTEM_CLIENT_CONNECT = 11,
  PacketOldID_SYSTEM_CLIENT_DISCONNECTD = 12,
  PacketOldID_LoginReq = 201,
  PacketOldID_LoginRes = 202,
  PacketOldID_NewLobbyReq = 203,
  PacketOldID_NewLobbyRes = 204,
  PacketOldID_EnterLobbyReq = 206,
  PacketOldID_EnterLobbyRes = 207,
  PacketOldID_LeaveLobbyReq = 209,
  PacketOldID_LeaveLobbyRes = 210,
  PacketOldID_ChatLobbyReq = 214,
  PacketOldID_ChatLobbyRes = 215,
  PacketOldID_ChatLobbyNtf = 216,
  PacketOldID_GameStartReqPkt = 301,
  PacketOldID_GameStartResPkt = 302,
  PacketOldID_GameStartNtfPkt = 303,
  PacketOldID_GameSyncReqPkt = 304,
  PacketOldID_GameSyncNtfPkt = 305,
  PacketOldID_GameScoreUpdateReqPkt = 306,
  PacketOldID_GameScoreUpdateNtfPkt = 307,
  PacketOldID_GameScoreUpdateResPkt = 308,
  PacketOldID_GameEndReqPkt = 311,
  PacketOldID_GameEndResPkt = 312,
  PacketOldID_GameEndNtfPkt = 313,
  PacketOldID_MIN = PacketOldID_INVALID,
  PacketOldID_MAX = PacketOldID_GameEndNtfPkt
};

inline const PacketOldID (&EnumValuesPacketOldID())[25] {
  static const PacketOldID values[] = {
    PacketOldID_INVALID,
    PacketOldID_SYSTEM_CLIENT_CONNECT,
    PacketOldID_SYSTEM_CLIENT_DISCONNECTD,
    PacketOldID_LoginReq,
    PacketOldID_LoginRes,
    PacketOldID_NewLobbyReq,
    PacketOldID_NewLobbyRes,
    PacketOldID_EnterLobbyReq,
    PacketOldID_EnterLobbyRes,
    PacketOldID_LeaveLobbyReq,
    PacketOldID_LeaveLobbyRes,
    PacketOldID_ChatLobbyReq,
    PacketOldID_ChatLobbyRes,
    PacketOldID_ChatLobbyNtf,
    PacketOldID_GameStartReqPkt,
    PacketOldID_GameStartResPkt,
    PacketOldID_GameStartNtfPkt,
    PacketOldID_GameSyncReqPkt,
    PacketOldID_GameSyncNtfPkt,
    PacketOldID_GameScoreUpdateReqPkt,
    PacketOldID_GameScoreUpdateNtfPkt,
    PacketOldID_GameScoreUpdateResPkt,
    PacketOldID_GameEndReqPkt,
    PacketOldID_GameEndResPkt,
    PacketOldID_GameEndNtfPkt
  };
  return values;
}

inline const char *EnumNamePacketOldID(PacketOldID e) {
  switch (e) {
    case PacketOldID_INVALID: return "INVALID";
    case PacketOldID_SYSTEM_CLIENT_CONNECT: return "SYSTEM_CLIENT_CONNECT";
    case PacketOldID_SYSTEM_CLIENT_DISCONNECTD: return "SYSTEM_CLIENT_DISCONNECTD";
    case PacketOldID_LoginReq: return "LoginReq";
    case PacketOldID_LoginRes: return "LoginRes";
    case PacketOldID_NewLobbyReq: return "NewLobbyReq";
    case PacketOldID_NewLobbyRes: return "NewLobbyRes";
    case PacketOldID_EnterLobbyReq: return "EnterLobbyReq";
    case PacketOldID_EnterLobbyRes: return "EnterLobbyRes";
    case PacketOldID_LeaveLobbyReq: return "LeaveLobbyReq";
    case PacketOldID_LeaveLobbyRes: return "LeaveLobbyRes";
    case PacketOldID_ChatLobbyReq: return "ChatLobbyReq";
    case PacketOldID_ChatLobbyRes: return "ChatLobbyRes";
    case PacketOldID_ChatLobbyNtf: return "ChatLobbyNtf";
    case PacketOldID_GameStartReqPkt: return "GameStartReqPkt";
    case PacketOldID_GameStartResPkt: return "GameStartResPkt";
    case PacketOldID_GameStartNtfPkt: return "GameStartNtfPkt";
    case PacketOldID_GameSyncReqPkt: return "GameSyncReqPkt";
    case PacketOldID_GameSyncNtfPkt: return "GameSyncNtfPkt";
    case PacketOldID_GameScoreUpdateReqPkt: return "GameScoreUpdateReqPkt";
    case PacketOldID_GameScoreUpdateNtfPkt: return "GameScoreUpdateNtfPkt";
    case PacketOldID_GameScoreUpdateResPkt: return "GameScoreUpdateResPkt";
    case PacketOldID_GameEndReqPkt: return "GameEndReqPkt";
    case PacketOldID_GameEndResPkt: return "GameEndResPkt";
    case PacketOldID_GameEndNtfPkt: return "GameEndNtfPkt";
    default: return "";
  }
}

struct Packet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_ID_TYPE = 4,
    VT_PACKET_ID = 6
  };
  PacketDefine::PACKET_ID packet_id_type() const {
    return static_cast<PacketDefine::PACKET_ID>(GetField<uint8_t>(VT_PACKET_ID_TYPE, 0));
  }
  const void *packet_id() const {
    return GetPointer<const void *>(VT_PACKET_ID);
  }
  template<typename T> const T *packet_id_as() const;
  const PacketDefine::PACKET_LOGIN_REQ *packet_id_as_PACKET_LOGIN_REQ() const {
    return packet_id_type() == PacketDefine::PACKET_ID_PACKET_LOGIN_REQ ? static_cast<const PacketDefine::PACKET_LOGIN_REQ *>(packet_id()) : nullptr;
  }
  const PacketDefine::PACKET_LOGIN_RES *packet_id_as_PACKET_LOGIN_RES() const {
    return packet_id_type() == PacketDefine::PACKET_ID_PACKET_LOGIN_RES ? static_cast<const PacketDefine::PACKET_LOGIN_RES *>(packet_id()) : nullptr;
  }
  const PacketDefine::PACKET_CREATE_LOBBY_REQ *packet_id_as_PACKET_CREATE_LOBBY_REQ() const {
    return packet_id_type() == PacketDefine::PACKET_ID_PACKET_CREATE_LOBBY_REQ ? static_cast<const PacketDefine::PACKET_CREATE_LOBBY_REQ *>(packet_id()) : nullptr;
  }
  const PacketDefine::PACKET_CREATE_LOBBY_RES *packet_id_as_PACKET_CREATE_LOBBY_RES() const {
    return packet_id_type() == PacketDefine::PACKET_ID_PACKET_CREATE_LOBBY_RES ? static_cast<const PacketDefine::PACKET_CREATE_LOBBY_RES *>(packet_id()) : nullptr;
  }
  const PacketDefine::PACKET_ENTER_LOBBY_REQ *packet_id_as_PACKET_ENTER_LOBBY_REQ() const {
    return packet_id_type() == PacketDefine::PACKET_ID_PACKET_ENTER_LOBBY_REQ ? static_cast<const PacketDefine::PACKET_ENTER_LOBBY_REQ *>(packet_id()) : nullptr;
  }
  const PacketDefine::PACKET_ENTER_LOBBY_RES *packet_id_as_PACKET_ENTER_LOBBY_RES() const {
    return packet_id_type() == PacketDefine::PACKET_ID_PACKET_ENTER_LOBBY_RES ? static_cast<const PacketDefine::PACKET_ENTER_LOBBY_RES *>(packet_id()) : nullptr;
  }
  const PacketDefine::PACKET_LEAVE_LOBBY_REQ *packet_id_as_PACKET_LEAVE_LOBBY_REQ() const {
    return packet_id_type() == PacketDefine::PACKET_ID_PACKET_LEAVE_LOBBY_REQ ? static_cast<const PacketDefine::PACKET_LEAVE_LOBBY_REQ *>(packet_id()) : nullptr;
  }
  const PacketDefine::PACKET_LEAVE_LOBBY_RES *packet_id_as_PACKET_LEAVE_LOBBY_RES() const {
    return packet_id_type() == PacketDefine::PACKET_ID_PACKET_LEAVE_LOBBY_RES ? static_cast<const PacketDefine::PACKET_LEAVE_LOBBY_RES *>(packet_id()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_ID_TYPE, 1) &&
           VerifyOffset(verifier, VT_PACKET_ID) &&
           VerifyPACKET_ID(verifier, packet_id(), packet_id_type()) &&
           verifier.EndTable();
  }
};

template<> inline const PacketDefine::PACKET_LOGIN_REQ *Packet::packet_id_as<PacketDefine::PACKET_LOGIN_REQ>() const {
  return packet_id_as_PACKET_LOGIN_REQ();
}

template<> inline const PacketDefine::PACKET_LOGIN_RES *Packet::packet_id_as<PacketDefine::PACKET_LOGIN_RES>() const {
  return packet_id_as_PACKET_LOGIN_RES();
}

template<> inline const PacketDefine::PACKET_CREATE_LOBBY_REQ *Packet::packet_id_as<PacketDefine::PACKET_CREATE_LOBBY_REQ>() const {
  return packet_id_as_PACKET_CREATE_LOBBY_REQ();
}

template<> inline const PacketDefine::PACKET_CREATE_LOBBY_RES *Packet::packet_id_as<PacketDefine::PACKET_CREATE_LOBBY_RES>() const {
  return packet_id_as_PACKET_CREATE_LOBBY_RES();
}

template<> inline const PacketDefine::PACKET_ENTER_LOBBY_REQ *Packet::packet_id_as<PacketDefine::PACKET_ENTER_LOBBY_REQ>() const {
  return packet_id_as_PACKET_ENTER_LOBBY_REQ();
}

template<> inline const PacketDefine::PACKET_ENTER_LOBBY_RES *Packet::packet_id_as<PacketDefine::PACKET_ENTER_LOBBY_RES>() const {
  return packet_id_as_PACKET_ENTER_LOBBY_RES();
}

template<> inline const PacketDefine::PACKET_LEAVE_LOBBY_REQ *Packet::packet_id_as<PacketDefine::PACKET_LEAVE_LOBBY_REQ>() const {
  return packet_id_as_PACKET_LEAVE_LOBBY_REQ();
}

template<> inline const PacketDefine::PACKET_LEAVE_LOBBY_RES *Packet::packet_id_as<PacketDefine::PACKET_LEAVE_LOBBY_RES>() const {
  return packet_id_as_PACKET_LEAVE_LOBBY_RES();
}

struct PacketBuilder {
  typedef Packet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_id_type(PacketDefine::PACKET_ID packet_id_type) {
    fbb_.AddElement<uint8_t>(Packet::VT_PACKET_ID_TYPE, static_cast<uint8_t>(packet_id_type), 0);
  }
  void add_packet_id(::flatbuffers::Offset<void> packet_id) {
    fbb_.AddOffset(Packet::VT_PACKET_ID, packet_id);
  }
  explicit PacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Packet> CreatePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketDefine::PACKET_ID packet_id_type = PacketDefine::PACKET_ID_NONE,
    ::flatbuffers::Offset<void> packet_id = 0) {
  PacketBuilder builder_(_fbb);
  builder_.add_packet_id(packet_id);
  builder_.add_packet_id_type(packet_id_type);
  return builder_.Finish();
}

struct PACKET_LOGIN_REQ FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PACKET_LOGIN_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USED_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *used_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USED_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USED_ID) &&
           verifier.VerifyString(used_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct PACKET_LOGIN_REQBuilder {
  typedef PACKET_LOGIN_REQ Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_used_id(::flatbuffers::Offset<::flatbuffers::String> used_id) {
    fbb_.AddOffset(PACKET_LOGIN_REQ::VT_USED_ID, used_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(PACKET_LOGIN_REQ::VT_PASSWORD, password);
  }
  explicit PACKET_LOGIN_REQBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PACKET_LOGIN_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PACKET_LOGIN_REQ>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PACKET_LOGIN_REQ> CreatePACKET_LOGIN_REQ(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> used_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  PACKET_LOGIN_REQBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_used_id(used_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PACKET_LOGIN_REQ> CreatePACKET_LOGIN_REQDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *used_id = nullptr,
    const char *password = nullptr) {
  auto used_id__ = used_id ? _fbb.CreateString(used_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return PacketDefine::CreatePACKET_LOGIN_REQ(
      _fbb,
      used_id__,
      password__);
}

struct PACKET_LOGIN_RES FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PACKET_LOGIN_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR_CODE = 4,
    VT_USED_ID = 6
  };
  PacketDefine::ErrorCode error_code() const {
    return static_cast<PacketDefine::ErrorCode>(GetField<int16_t>(VT_ERROR_CODE, 0));
  }
  const ::flatbuffers::String *used_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USED_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ERROR_CODE, 2) &&
           VerifyOffset(verifier, VT_USED_ID) &&
           verifier.VerifyString(used_id()) &&
           verifier.EndTable();
  }
};

struct PACKET_LOGIN_RESBuilder {
  typedef PACKET_LOGIN_RES Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_error_code(PacketDefine::ErrorCode error_code) {
    fbb_.AddElement<int16_t>(PACKET_LOGIN_RES::VT_ERROR_CODE, static_cast<int16_t>(error_code), 0);
  }
  void add_used_id(::flatbuffers::Offset<::flatbuffers::String> used_id) {
    fbb_.AddOffset(PACKET_LOGIN_RES::VT_USED_ID, used_id);
  }
  explicit PACKET_LOGIN_RESBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PACKET_LOGIN_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PACKET_LOGIN_RES>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PACKET_LOGIN_RES> CreatePACKET_LOGIN_RES(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketDefine::ErrorCode error_code = PacketDefine::ErrorCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::String> used_id = 0) {
  PACKET_LOGIN_RESBuilder builder_(_fbb);
  builder_.add_used_id(used_id);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PACKET_LOGIN_RES> CreatePACKET_LOGIN_RESDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketDefine::ErrorCode error_code = PacketDefine::ErrorCode_SUCCESS,
    const char *used_id = nullptr) {
  auto used_id__ = used_id ? _fbb.CreateString(used_id) : 0;
  return PacketDefine::CreatePACKET_LOGIN_RES(
      _fbb,
      error_code,
      used_id__);
}

struct PACKET_CREATE_LOBBY_REQ FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PACKET_CREATE_LOBBY_REQBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PACKET_CREATE_LOBBY_REQBuilder {
  typedef PACKET_CREATE_LOBBY_REQ Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PACKET_CREATE_LOBBY_REQBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PACKET_CREATE_LOBBY_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PACKET_CREATE_LOBBY_REQ>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PACKET_CREATE_LOBBY_REQ> CreatePACKET_CREATE_LOBBY_REQ(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PACKET_CREATE_LOBBY_REQBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PACKET_CREATE_LOBBY_RES FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PACKET_CREATE_LOBBY_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR_CODE = 4,
    VT_ROOM_ID = 6,
    VT_ENTER_KEY = 8
  };
  PacketDefine::ErrorCode error_code() const {
    return static_cast<PacketDefine::ErrorCode>(GetField<int16_t>(VT_ERROR_CODE, 0));
  }
  int16_t room_id() const {
    return GetField<int16_t>(VT_ROOM_ID, 0);
  }
  const ::flatbuffers::String *enter_key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTER_KEY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ERROR_CODE, 2) &&
           VerifyField<int16_t>(verifier, VT_ROOM_ID, 2) &&
           VerifyOffset(verifier, VT_ENTER_KEY) &&
           verifier.VerifyString(enter_key()) &&
           verifier.EndTable();
  }
};

struct PACKET_CREATE_LOBBY_RESBuilder {
  typedef PACKET_CREATE_LOBBY_RES Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_error_code(PacketDefine::ErrorCode error_code) {
    fbb_.AddElement<int16_t>(PACKET_CREATE_LOBBY_RES::VT_ERROR_CODE, static_cast<int16_t>(error_code), 0);
  }
  void add_room_id(int16_t room_id) {
    fbb_.AddElement<int16_t>(PACKET_CREATE_LOBBY_RES::VT_ROOM_ID, room_id, 0);
  }
  void add_enter_key(::flatbuffers::Offset<::flatbuffers::String> enter_key) {
    fbb_.AddOffset(PACKET_CREATE_LOBBY_RES::VT_ENTER_KEY, enter_key);
  }
  explicit PACKET_CREATE_LOBBY_RESBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PACKET_CREATE_LOBBY_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PACKET_CREATE_LOBBY_RES>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PACKET_CREATE_LOBBY_RES> CreatePACKET_CREATE_LOBBY_RES(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketDefine::ErrorCode error_code = PacketDefine::ErrorCode_SUCCESS,
    int16_t room_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> enter_key = 0) {
  PACKET_CREATE_LOBBY_RESBuilder builder_(_fbb);
  builder_.add_enter_key(enter_key);
  builder_.add_room_id(room_id);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PACKET_CREATE_LOBBY_RES> CreatePACKET_CREATE_LOBBY_RESDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketDefine::ErrorCode error_code = PacketDefine::ErrorCode_SUCCESS,
    int16_t room_id = 0,
    const char *enter_key = nullptr) {
  auto enter_key__ = enter_key ? _fbb.CreateString(enter_key) : 0;
  return PacketDefine::CreatePACKET_CREATE_LOBBY_RES(
      _fbb,
      error_code,
      room_id,
      enter_key__);
}

struct PACKET_ENTER_LOBBY_REQ FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PACKET_ENTER_LOBBY_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOM_ID = 4,
    VT_ENTER_KEY = 6
  };
  int16_t room_id() const {
    return GetField<int16_t>(VT_ROOM_ID, 0);
  }
  const ::flatbuffers::String *enter_key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTER_KEY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ROOM_ID, 2) &&
           VerifyOffset(verifier, VT_ENTER_KEY) &&
           verifier.VerifyString(enter_key()) &&
           verifier.EndTable();
  }
};

struct PACKET_ENTER_LOBBY_REQBuilder {
  typedef PACKET_ENTER_LOBBY_REQ Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_room_id(int16_t room_id) {
    fbb_.AddElement<int16_t>(PACKET_ENTER_LOBBY_REQ::VT_ROOM_ID, room_id, 0);
  }
  void add_enter_key(::flatbuffers::Offset<::flatbuffers::String> enter_key) {
    fbb_.AddOffset(PACKET_ENTER_LOBBY_REQ::VT_ENTER_KEY, enter_key);
  }
  explicit PACKET_ENTER_LOBBY_REQBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PACKET_ENTER_LOBBY_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PACKET_ENTER_LOBBY_REQ>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PACKET_ENTER_LOBBY_REQ> CreatePACKET_ENTER_LOBBY_REQ(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t room_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> enter_key = 0) {
  PACKET_ENTER_LOBBY_REQBuilder builder_(_fbb);
  builder_.add_enter_key(enter_key);
  builder_.add_room_id(room_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PACKET_ENTER_LOBBY_REQ> CreatePACKET_ENTER_LOBBY_REQDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t room_id = 0,
    const char *enter_key = nullptr) {
  auto enter_key__ = enter_key ? _fbb.CreateString(enter_key) : 0;
  return PacketDefine::CreatePACKET_ENTER_LOBBY_REQ(
      _fbb,
      room_id,
      enter_key__);
}

struct PACKET_ENTER_LOBBY_RES FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PACKET_ENTER_LOBBY_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERR_CODE = 4,
    VT_ROOM_ID = 6
  };
  PacketDefine::ErrorCode err_code() const {
    return static_cast<PacketDefine::ErrorCode>(GetField<int16_t>(VT_ERR_CODE, 0));
  }
  int16_t room_id() const {
    return GetField<int16_t>(VT_ROOM_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ERR_CODE, 2) &&
           VerifyField<int16_t>(verifier, VT_ROOM_ID, 2) &&
           verifier.EndTable();
  }
};

struct PACKET_ENTER_LOBBY_RESBuilder {
  typedef PACKET_ENTER_LOBBY_RES Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_err_code(PacketDefine::ErrorCode err_code) {
    fbb_.AddElement<int16_t>(PACKET_ENTER_LOBBY_RES::VT_ERR_CODE, static_cast<int16_t>(err_code), 0);
  }
  void add_room_id(int16_t room_id) {
    fbb_.AddElement<int16_t>(PACKET_ENTER_LOBBY_RES::VT_ROOM_ID, room_id, 0);
  }
  explicit PACKET_ENTER_LOBBY_RESBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PACKET_ENTER_LOBBY_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PACKET_ENTER_LOBBY_RES>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PACKET_ENTER_LOBBY_RES> CreatePACKET_ENTER_LOBBY_RES(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketDefine::ErrorCode err_code = PacketDefine::ErrorCode_SUCCESS,
    int16_t room_id = 0) {
  PACKET_ENTER_LOBBY_RESBuilder builder_(_fbb);
  builder_.add_room_id(room_id);
  builder_.add_err_code(err_code);
  return builder_.Finish();
}

struct PACKET_LEAVE_LOBBY_REQ FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PACKET_LEAVE_LOBBY_REQBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PACKET_LEAVE_LOBBY_REQBuilder {
  typedef PACKET_LEAVE_LOBBY_REQ Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PACKET_LEAVE_LOBBY_REQBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PACKET_LEAVE_LOBBY_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PACKET_LEAVE_LOBBY_REQ>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PACKET_LEAVE_LOBBY_REQ> CreatePACKET_LEAVE_LOBBY_REQ(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PACKET_LEAVE_LOBBY_REQBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PACKET_LEAVE_LOBBY_RES FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PACKET_LEAVE_LOBBY_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERR_CODE = 4
  };
  PacketDefine::ErrorCode err_code() const {
    return static_cast<PacketDefine::ErrorCode>(GetField<int16_t>(VT_ERR_CODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ERR_CODE, 2) &&
           verifier.EndTable();
  }
};

struct PACKET_LEAVE_LOBBY_RESBuilder {
  typedef PACKET_LEAVE_LOBBY_RES Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_err_code(PacketDefine::ErrorCode err_code) {
    fbb_.AddElement<int16_t>(PACKET_LEAVE_LOBBY_RES::VT_ERR_CODE, static_cast<int16_t>(err_code), 0);
  }
  explicit PACKET_LEAVE_LOBBY_RESBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PACKET_LEAVE_LOBBY_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PACKET_LEAVE_LOBBY_RES>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PACKET_LEAVE_LOBBY_RES> CreatePACKET_LEAVE_LOBBY_RES(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketDefine::ErrorCode err_code = PacketDefine::ErrorCode_SUCCESS) {
  PACKET_LEAVE_LOBBY_RESBuilder builder_(_fbb);
  builder_.add_err_code(err_code);
  return builder_.Finish();
}

inline bool VerifyPACKET_ID(::flatbuffers::Verifier &verifier, const void *obj, PACKET_ID type) {
  switch (type) {
    case PACKET_ID_NONE: {
      return true;
    }
    case PACKET_ID_PACKET_LOGIN_REQ: {
      auto ptr = reinterpret_cast<const PacketDefine::PACKET_LOGIN_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PACKET_ID_PACKET_LOGIN_RES: {
      auto ptr = reinterpret_cast<const PacketDefine::PACKET_LOGIN_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PACKET_ID_PACKET_CREATE_LOBBY_REQ: {
      auto ptr = reinterpret_cast<const PacketDefine::PACKET_CREATE_LOBBY_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PACKET_ID_PACKET_CREATE_LOBBY_RES: {
      auto ptr = reinterpret_cast<const PacketDefine::PACKET_CREATE_LOBBY_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PACKET_ID_PACKET_ENTER_LOBBY_REQ: {
      auto ptr = reinterpret_cast<const PacketDefine::PACKET_ENTER_LOBBY_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PACKET_ID_PACKET_ENTER_LOBBY_RES: {
      auto ptr = reinterpret_cast<const PacketDefine::PACKET_ENTER_LOBBY_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PACKET_ID_PACKET_LEAVE_LOBBY_REQ: {
      auto ptr = reinterpret_cast<const PacketDefine::PACKET_LEAVE_LOBBY_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PACKET_ID_PACKET_LEAVE_LOBBY_RES: {
      auto ptr = reinterpret_cast<const PacketDefine::PACKET_LEAVE_LOBBY_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPACKET_IDVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPACKET_ID(
        verifier,  values->Get(i), types->GetEnum<PACKET_ID>(i))) {
      return false;
    }
  }
  return true;
}

inline const PacketDefine::Packet *GetPacket(const void *buf) {
  return ::flatbuffers::GetRoot<PacketDefine::Packet>(buf);
}

inline const PacketDefine::Packet *GetSizePrefixedPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PacketDefine::Packet>(buf);
}

inline bool VerifyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketDefine::Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketDefine::Packet>(nullptr);
}

inline void FinishPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketDefine::Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketDefine::Packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PacketDefine

#endif  // FLATBUFFERS_GENERATED_PACKET_PACKETDEFINE_H_
