// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYER_FBPACKET_H_
#define FLATBUFFERS_GENERATED_PLAYER_FBPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace FbPacket {

struct FbVec3;

struct FbQuat;

struct FbPlayer;
struct FbPlayerBuilder;

enum FbClassType : int8_t {
  FbClassType_None = 0,
  FbClassType_Tank = 1,
  FbClassType_Archer = 2,
  FbClassType_Mage = 3,
  FbClassType_Rogue = 4,
  FbClassType_MIN = FbClassType_None,
  FbClassType_MAX = FbClassType_Rogue
};

inline const FbClassType (&EnumValuesFbClassType())[5] {
  static const FbClassType values[] = {
    FbClassType_None,
    FbClassType_Tank,
    FbClassType_Archer,
    FbClassType_Mage,
    FbClassType_Rogue
  };
  return values;
}

inline const char * const *EnumNamesFbClassType() {
  static const char * const names[6] = {
    "None",
    "Tank",
    "Archer",
    "Mage",
    "Rogue",
    nullptr
  };
  return names;
}

inline const char *EnumNameFbClassType(FbClassType e) {
  if (::flatbuffers::IsOutRange(e, FbClassType_None, FbClassType_Rogue)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFbClassType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) FbVec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  FbVec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  FbVec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(FbVec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) FbQuat FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  FbQuat()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  FbQuat(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(FbQuat, 16);

struct FbPlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FbPlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NICK_NAME = 6,
    VT_POSITION = 8,
    VT_ROTATION = 10,
    VT_HP = 12,
    VT_NAME = 14,
    VT_CLASS_ = 16
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *nick_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NICK_NAME);
  }
  const FbPacket::FbVec3 *position() const {
    return GetStruct<const FbPacket::FbVec3 *>(VT_POSITION);
  }
  const FbPacket::FbQuat *rotation() const {
    return GetStruct<const FbPacket::FbQuat *>(VT_ROTATION);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  FbPacket::FbClassType class_() const {
    return static_cast<FbPacket::FbClassType>(GetField<int8_t>(VT_CLASS_, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<FbPacket::FbVec3>(verifier, VT_POSITION, 4) &&
           VerifyField<FbPacket::FbQuat>(verifier, VT_ROTATION, 4) &&
           VerifyField<int16_t>(verifier, VT_HP, 2) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_CLASS_, 1) &&
           verifier.EndTable();
  }
};

struct FbPlayerBuilder {
  typedef FbPlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(FbPlayer::VT_ID, id, 0);
  }
  void add_nick_name(::flatbuffers::Offset<::flatbuffers::String> nick_name) {
    fbb_.AddOffset(FbPlayer::VT_NICK_NAME, nick_name);
  }
  void add_position(const FbPacket::FbVec3 *position) {
    fbb_.AddStruct(FbPlayer::VT_POSITION, position);
  }
  void add_rotation(const FbPacket::FbQuat *rotation) {
    fbb_.AddStruct(FbPlayer::VT_ROTATION, rotation);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(FbPlayer::VT_HP, hp, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FbPlayer::VT_NAME, name);
  }
  void add_class_(FbPacket::FbClassType class_) {
    fbb_.AddElement<int8_t>(FbPlayer::VT_CLASS_, static_cast<int8_t>(class_), 0);
  }
  explicit FbPlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FbPlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FbPlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FbPlayer> CreateFbPlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nick_name = 0,
    const FbPacket::FbVec3 *position = nullptr,
    const FbPacket::FbQuat *rotation = nullptr,
    int16_t hp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    FbPacket::FbClassType class_ = FbPacket::FbClassType_None) {
  FbPlayerBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_name(name);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  builder_.add_nick_name(nick_name);
  builder_.add_hp(hp);
  builder_.add_class_(class_);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FbPlayer> CreateFbPlayerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    const char *nick_name = nullptr,
    const FbPacket::FbVec3 *position = nullptr,
    const FbPacket::FbQuat *rotation = nullptr,
    int16_t hp = 0,
    const char *name = nullptr,
    FbPacket::FbClassType class_ = FbPacket::FbClassType_None) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return FbPacket::CreateFbPlayer(
      _fbb,
      id,
      nick_name__,
      position,
      rotation,
      hp,
      name__,
      class_);
}

inline const FbPacket::FbPlayer *GetFbPlayer(const void *buf) {
  return ::flatbuffers::GetRoot<FbPacket::FbPlayer>(buf);
}

inline const FbPacket::FbPlayer *GetSizePrefixedFbPlayer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FbPacket::FbPlayer>(buf);
}

inline bool VerifyFbPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FbPacket::FbPlayer>(nullptr);
}

inline bool VerifySizePrefixedFbPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FbPacket::FbPlayer>(nullptr);
}

inline void FinishFbPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FbPacket::FbPlayer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFbPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FbPacket::FbPlayer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FbPacket

#endif  // FLATBUFFERS_GENERATED_PLAYER_FBPACKET_H_
