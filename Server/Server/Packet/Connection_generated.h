// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONNECTION_FBPACKET_H_
#define FLATBUFFERS_GENERATED_CONNECTION_FBPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace FbPacket {

struct ConnectionPayload;
struct ConnectionPayloadBuilder;

struct ConnectionApprovalRequest;
struct ConnectionApprovalRequestBuilder;

struct ConnectionApprovalResponse;
struct ConnectionApprovalResponseBuilder;

enum FbConnectStatus : int16_t {
  FbConnectStatus_Undefined = 0,
  FbConnectStatus_Success = 1,
  FbConnectStatus_ServerFull = 2,
  FbConnectStatus_LoggedInAgain = 3,
  FbConnectStatus_UserRequestedDisconnect = 4,
  FbConnectStatus_GenericDisconnect = 5,
  FbConnectStatus_Reconnecting = 6,
  FbConnectStatus_IncompatibleBuildType = 7,
  FbConnectStatus_HostEndedSession = 8,
  FbConnectStatus_StartClientFailed = 9,
  FbConnectStatus_MIN = FbConnectStatus_Undefined,
  FbConnectStatus_MAX = FbConnectStatus_StartClientFailed
};

inline const FbConnectStatus (&EnumValuesFbConnectStatus())[10] {
  static const FbConnectStatus values[] = {
    FbConnectStatus_Undefined,
    FbConnectStatus_Success,
    FbConnectStatus_ServerFull,
    FbConnectStatus_LoggedInAgain,
    FbConnectStatus_UserRequestedDisconnect,
    FbConnectStatus_GenericDisconnect,
    FbConnectStatus_Reconnecting,
    FbConnectStatus_IncompatibleBuildType,
    FbConnectStatus_HostEndedSession,
    FbConnectStatus_StartClientFailed
  };
  return values;
}

inline const char * const *EnumNamesFbConnectStatus() {
  static const char * const names[11] = {
    "Undefined",
    "Success",
    "ServerFull",
    "LoggedInAgain",
    "UserRequestedDisconnect",
    "GenericDisconnect",
    "Reconnecting",
    "IncompatibleBuildType",
    "HostEndedSession",
    "StartClientFailed",
    nullptr
  };
  return names;
}

inline const char *EnumNameFbConnectStatus(FbConnectStatus e) {
  if (::flatbuffers::IsOutRange(e, FbConnectStatus_Undefined, FbConnectStatus_StartClientFailed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFbConnectStatus()[index];
}

struct ConnectionPayload FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectionPayloadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERID = 4,
    VT_PLAYERNAME = 6,
    VT_ISDEBUG = 8
  };
  const ::flatbuffers::String *playerId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLAYERID);
  }
  const ::flatbuffers::String *playerName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLAYERNAME);
  }
  bool isDebug() const {
    return GetField<uint8_t>(VT_ISDEBUG, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYERID) &&
           verifier.VerifyString(playerId()) &&
           VerifyOffset(verifier, VT_PLAYERNAME) &&
           verifier.VerifyString(playerName()) &&
           VerifyField<uint8_t>(verifier, VT_ISDEBUG, 1) &&
           verifier.EndTable();
  }
};

struct ConnectionPayloadBuilder {
  typedef ConnectionPayload Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_playerId(::flatbuffers::Offset<::flatbuffers::String> playerId) {
    fbb_.AddOffset(ConnectionPayload::VT_PLAYERID, playerId);
  }
  void add_playerName(::flatbuffers::Offset<::flatbuffers::String> playerName) {
    fbb_.AddOffset(ConnectionPayload::VT_PLAYERNAME, playerName);
  }
  void add_isDebug(bool isDebug) {
    fbb_.AddElement<uint8_t>(ConnectionPayload::VT_ISDEBUG, static_cast<uint8_t>(isDebug), 0);
  }
  explicit ConnectionPayloadBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectionPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectionPayload>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectionPayload> CreateConnectionPayload(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> playerId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> playerName = 0,
    bool isDebug = false) {
  ConnectionPayloadBuilder builder_(_fbb);
  builder_.add_playerName(playerName);
  builder_.add_playerId(playerId);
  builder_.add_isDebug(isDebug);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ConnectionPayload> CreateConnectionPayloadDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *playerId = nullptr,
    const char *playerName = nullptr,
    bool isDebug = false) {
  auto playerId__ = playerId ? _fbb.CreateString(playerId) : 0;
  auto playerName__ = playerName ? _fbb.CreateString(playerName) : 0;
  return FbPacket::CreateConnectionPayload(
      _fbb,
      playerId__,
      playerName__,
      isDebug);
}

struct ConnectionApprovalRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectionApprovalRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD = 4
  };
  const FbPacket::ConnectionPayload *payload() const {
    return GetPointer<const FbPacket::ConnectionPayload *>(VT_PAYLOAD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyTable(payload()) &&
           verifier.EndTable();
  }
};

struct ConnectionApprovalRequestBuilder {
  typedef ConnectionApprovalRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload(::flatbuffers::Offset<FbPacket::ConnectionPayload> payload) {
    fbb_.AddOffset(ConnectionApprovalRequest::VT_PAYLOAD, payload);
  }
  explicit ConnectionApprovalRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectionApprovalRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectionApprovalRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectionApprovalRequest> CreateConnectionApprovalRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FbPacket::ConnectionPayload> payload = 0) {
  ConnectionApprovalRequestBuilder builder_(_fbb);
  builder_.add_payload(payload);
  return builder_.Finish();
}

struct ConnectionApprovalResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectionApprovalResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_APPROVED = 6
  };
  FbPacket::FbConnectStatus status() const {
    return static_cast<FbPacket::FbConnectStatus>(GetField<int16_t>(VT_STATUS, 0));
  }
  bool approved() const {
    return GetField<uint8_t>(VT_APPROVED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_STATUS, 2) &&
           VerifyField<uint8_t>(verifier, VT_APPROVED, 1) &&
           verifier.EndTable();
  }
};

struct ConnectionApprovalResponseBuilder {
  typedef ConnectionApprovalResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_status(FbPacket::FbConnectStatus status) {
    fbb_.AddElement<int16_t>(ConnectionApprovalResponse::VT_STATUS, static_cast<int16_t>(status), 0);
  }
  void add_approved(bool approved) {
    fbb_.AddElement<uint8_t>(ConnectionApprovalResponse::VT_APPROVED, static_cast<uint8_t>(approved), 0);
  }
  explicit ConnectionApprovalResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectionApprovalResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectionApprovalResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectionApprovalResponse> CreateConnectionApprovalResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    FbPacket::FbConnectStatus status = FbPacket::FbConnectStatus_Undefined,
    bool approved = false) {
  ConnectionApprovalResponseBuilder builder_(_fbb);
  builder_.add_status(status);
  builder_.add_approved(approved);
  return builder_.Finish();
}

}  // namespace FbPacket

#endif  // FLATBUFFERS_GENERATED_CONNECTION_FBPACKET_H_
