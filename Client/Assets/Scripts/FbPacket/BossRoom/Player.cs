// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BossRoom
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Player : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static Player GetRootAsPlayer(ByteBuffer _bb) { return GetRootAsPlayer(_bb, new Player()); }
  public static Player GetRootAsPlayer(ByteBuffer _bb, Player obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Player __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string NickName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNickNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNickNameArray() { return __p.__vector_as_array<byte>(6); }
  public BossRoom.Vector3? Position { get { int o = __p.__offset(8); return o != 0 ? (BossRoom.Vector3?)(new BossRoom.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public BossRoom.Quaternion? Rotation { get { int o = __p.__offset(10); return o != 0 ? (BossRoom.Quaternion?)(new BossRoom.Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public short Hp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(14); }
  public BossRoom.ClassType Class { get { int o = __p.__offset(16); return o != 0 ? (BossRoom.ClassType)__p.bb.GetSbyte(o + __p.bb_pos) : BossRoom.ClassType.None; } }

  public static void StartPlayer(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddNickName(FlatBufferBuilder builder, StringOffset nickNameOffset) { builder.AddOffset(1, nickNameOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<BossRoom.Vector3> positionOffset) { builder.AddStruct(2, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<BossRoom.Quaternion> rotationOffset) { builder.AddStruct(3, rotationOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, short hp) { builder.AddShort(4, hp, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(5, nameOffset.Value, 0); }
  public static void AddClass(FlatBufferBuilder builder, BossRoom.ClassType @class) { builder.AddSbyte(6, (sbyte)@class, 0); }
  public static Offset<BossRoom.Player> EndPlayer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BossRoom.Player>(o);
  }
  public static void FinishPlayerBuffer(FlatBufferBuilder builder, Offset<BossRoom.Player> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlayerBuffer(FlatBufferBuilder builder, Offset<BossRoom.Player> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
